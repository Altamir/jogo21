package com.classes;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;

public class Baralho implements JogoDeCartas {
	private Carta[] cartas;
	private int qtCartas = 0;
	private final static Baralho deck = new Baralho();

	private Baralho() {
		criarCartas();
	}

	public static Baralho factoryBaralho() {
		return deck;
	}

	public Carta getCarta(int numCarta) {
		if (numCarta > qtCartas) {
			return null;
		}
		return cartas[numCarta];
	}

	private void criarCartas() {
		cartas = new Carta[52];
		criaCartasDe(NAIPE.COPAS);
		criaCartasDe(NAIPE.ESPADAS);
		criaCartasDe(NAIPE.OURO);
		criaCartasDe(NAIPE.PAUS);
	}

	private void criaCartasDe(NAIPE naipe) {
		for (int valor = 1; valor < 14; valor++) {
			cartas[qtCartas] = new Carta(valor, naipe);
			qtCartas++;
		}
	}

	@Override
	public void ordenar() {
		ArrayList<Carta> copas = new ArrayList<>();
		ArrayList<Carta> espadas = new ArrayList<>();
		ArrayList<Carta> ouros = new ArrayList<>();
		ArrayList<Carta> paus = new ArrayList<>();

		separaPorNaipe(copas, espadas, ouros, paus);

		ordenaDeck(paus);
		ordenaDeck(ouros);
		ordenaDeck(espadas);
		ordenaDeck(copas);
}

	private void separaPorNaipe(ArrayList<Carta> copas,
			ArrayList<Carta> espadas, ArrayList<Carta> ouros,
			ArrayList<Carta> paus) {
		for (Carta carta : cartas) {
			switch (carta.getNaipe()) {
			case COPAS:
				copas.add(carta);
				break;
			case ESPADAS:
				espadas.add(carta);
				break;
			case OURO:
				ouros.add(carta);
				break;
			case PAUS:
				paus.add(carta);
				break;
			default:
				break;
			}
		}
	}

	private void ordenaDeck(ArrayList<Carta> cartas) {
		Collections.sort(cartas);
	}

	@Override
	public void embaralhar() {
		// TODO Auto-generated method stub

	}

	@Override
	public void darCartas() {
		// TODO Auto-generated method stub

	}

	@Override
	public String listarBaralho() {
		StringBuffer retorno = new StringBuffer();

		for (int i = 0; i < qtCartas; i++) {
			retorno.append(getCarta(i).toString());
			retorno.append("\r\n");
		}
		return retorno.toString();
	}

}
